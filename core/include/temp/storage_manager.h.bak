/**
 * @file   storage_manager.h
 * @author Stavros Papadopoulos <stavrosp@csail.mit.edu>
 *
 * @section LICENSE
 *
 * The MIT License
 *
 * @copyright Copyright (c) 2014 Stavros Papadopoulos <stavrosp@csail.mit.edu>
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 * 
 * @section DESCRIPTION
 *
 * This file defines class StorageManager.
 */

#ifndef STORAGE_MANAGER_H
#define STORAGE_MANAGER_H

#include "tile.h"
#include "debug.h"
#include <vector>
#include <string>
#include <map>
#include <set>

/** File name of attribute name index. */
#define SM_ATTRIBUTE_NAME_INDEX_NAME "attribute_name"
/** File name of bounding coordinates index. */
#define SM_BOUNDING_COORDINATES_INDEX_NAME "bounding_coordinates"
/** 
 * All tiles are named. The attribute tiles are named after the attribute they
 * correspond to. The coordinate tiles are given a default, fixed name.
 */
#define SM_COORDINATE_TILE_NAME "__coord"
/** Suffix of all index files. */
#define SM_INDEX_FILE_SUFFIX ".ind"
/** File name of MBR index. */
#define SM_MBR_INDEX_NAME "MBR"
/** File name of offset index. */
#define SM_OFFSET_INDEX_NAME "offset"
/** 
 * The segment size determines the minimum amount of data that can be exchanged
 * between the hard disk and the main memory. Unless otherwise defined, this
 * default size is used. 
 */
#define SM_SEGMENT_SIZE 10000000
/** Suffix of all tile data files. */
#define SM_TILE_DATA_FILE_SUFFIX ".tdt"
/** File name of tile id index. */
#define SM_TILE_ID_INDEX_NAME "tile_id"

/** 
 * The storage manager class. It is responsible for storing/fetching tiles
 * to/from the disk. It also manages all the book-keeping structures and
 * data files for the created arrays.
 */
class StorageManager {
 public:
  // TYPE DEFINITIONS
  /** 
   * An array is opened either to be created (CREATE mode) or to be read 
   * (READ mode), but not both. 
   */
  enum ArrayMode {READ, CREATE, NOT_OPEN};
  /** 
   * A mutlidimensional range (i.e., a hyper-rectangle in the logical space). 
   * It is a list of low/high values across each dimension, i.e.,
   * (dim#1_low, dim#1_high, dim#2_low, dim#2_high, ...).
   */
  typedef std::vector<double> Range;
  /** Mnemonic: [tile_id] --> rank */
  typedef std::map<uint64_t, uint64_t> TileIDToRank; 
  /** Mnemonic: [attribute_name][tile_id] --> rank */
  typedef std::map<std::string, TileIDToRank> AttributeToTileIDToRank; 
  /** Mnemonic: {attribute_name#1, attribute_name#2, ...} */
  typedef std::set<std::string> AttributeSet;
  /** Mnemonic: <tile#1, tile#2, ...> */
  typedef std::vector<const Tile*> TileList;
  /** Mnemonic: [attribute_name] --> <tile#1, tile#2, ...> */
  typedef std::map<std::string, TileList> AttributeToTileList;
  /** Mnemonic: [attribute_name] --> payload_size */
  typedef std::map<std::string, uint64_t> AttributeToPayloadSize;
  /** Mnemonic: <offset#1, offset#2, ...> */
  typedef std::vector<uint64_t> OffsetList;
  /** Mnemonic: [attribute_name] --> <offset#1, offset#2, ...> */
  typedef std::map<std::string, OffsetList> AttributeToOffsetList;
  /** Mnemonic: <dim#1_lower, dim#1_upper, dim#2_lower, ...> */
  typedef std::vector<double> MBR; 
  /** Mnemonic: <MBR#1, MBR#2, ...> */
  typedef std::vector<MBR> MBRList;
  /** Mnemonic: (first coordinates, last coordinates) */
  typedef std::pair<std::vector<double>, std::vector<double> > 
      BoundingCoordinates;
  /** Mnemonic: <bounding_coordinates#1, bounding_coordinates#2, ...> */
  typedef std::vector<BoundingCoordinates> BoundingCoordinatesList;
  /** Mnemonic: [array_name] --> {attribute_name#1, attribute_name#2, ... } */
  typedef std::map<std::string, AttributeSet> AttributeNameIndex;
  /** Mnemonic: [array_name] --> mode */
  typedef std::map<std::string, ArrayMode> OpenArraysIndex;
  /** Mnemonic: [array_name][attribute_name][tile_id] --> rank */
  typedef std::map<std::string, AttributeToTileIDToRank> TileIDIndex;
  /** Mnemonic: [array_name][attribute_name] --> <tile#1, tile#2, ... > */
  typedef std::map<std::string, AttributeToTileList> TileIndex; 
  /** Mnemonic: [array_name][attribute_name] --> <offset#1, offset32, ...> */
  typedef std::map<std::string, AttributeToOffsetList> OffsetIndex; 
  /** Mnemonic: [array_name][attribute_name] --> payload_size */
  typedef std::map<std::string, AttributeToPayloadSize> PayloadSizeIndex; 
  /** Mnemonic: [array_name] --> <MBR#1, MBR#2, ... > */
  typedef std::map<std::string, MBRList> MBRIndex;
  /** Mnemonic: [array_name] --> <boudning_coordinates#1, ...> */
  typedef std::map<std::string, BoundingCoordinatesList> 
      BoundingCoordinatesIndex; 
   
  // CONSTRUCTORS & DESTRUCTORS
  /**
   * Upon its creation, a storage manager object needs a workspace path. The 
   * latter is a folder in the disk where the storage manager creates all the 
   * array data (i.e., tile and index files). Note that the input path must 
   * exist. If the workspace folder exists, the function does nothing, 
   * otherwise it creates it. The segment size determines the amount of data 
   * exchanged in an I/O operation between the disk and the main memory. 
   */
  StorageManager(const std::string& path, 
                 uint64_t segment_size = SM_SEGMENT_SIZE);
  /** When a storage manager object is deleted, it closes all open arrays. */
  ~StorageManager();
 
  // MUTATORS
  /** Changes the default segment size. */
  void set_segment_size(uint64_t segment_size) { segment_size_ = segment_size; }
   
  // ARRAY FUNCTIONS
  /** Returns the array mode of the array. */
  ArrayMode array_mode(const std::string& array_name) const; 
  /**
   * When an array is closed, its book-keeping structures maintained by the 
   * storage manager (i.e., its indices) are cleaned up. If the array
   * is in CREATE mode, its indices are flushed into the disk for persistence.
   * However, before doing so, the function checks the array 'correctness'.
   * An array is correct if (i) it is empty, or (ii) the same set of tile ids
   * has been inserted for all attributes (as well as coordinates) seen by the 
   * storage manager for this array. If the array is not correct, a 
   * StorageManagerException is thrown.
   */ 
  void close_array(const std::string& array_name);
  /**
   * It deletes an array (currently open or not). It deletes its tile data
   * and indices, and cleans up all its related data currently in main memory.
   */
  void delete_array(const std::string& array_name);
  /** Returns true if the array is empty. */
  bool is_empty(const std::string& array_name) const;
  /** Returns true if the array is open. */
  bool is_open(const std::string& array_name) const;
  /** 
   * An array is opened in either CREATE or READ mode. If the array is opened
   * in CREATE mode, a directory is created in the workspace with the name
   * of this array. Otherwise, its indices are loaded in main memory from
   * its directory in the disk.
   */
  void open_array(const std::string& array_name, ArrayMode mode);

  // TILE FUNCTIONS
  /**
   * Inserts an attribute tile into the array. Note that tiles are always 
   * appended in the end of the corresponding attribute file. IMPORTANT: 
   * Tiles must be appended in an increasing tile id order (otherwise, a 
   * StorageManagerException is thrown). 
   */
  void append_tile(const Tile* tile, const std::string& array_name,
                   const std::string& attribute_name); 
  /**
   * Inserts a coordinate tile into an array. Note that tiles are always 
   * appended in the end of the corresponding coordinate file. Note also
   * that coordinate tiles are unnamed (the storage manager gives them
   * the default name SM_COORDINATE_TILE_NAME). IMPORTANT: Tiles must
   * be appended in an increasing tile id order (otherwise, a 
   * StorageManagerException is thrown). 
   */
  void append_tile(const Tile* tile, const std::string& array_name);
  /** Returns an attribute tile of an array with the specified tile id. */
  template<class T>
  const Tile* get_tile(const std::string& array_name, 
                       const std::string& attribute_name, 
                       uint64_t tile_id);  
  /** 
   * Returns a coordinate tile of an array with the specified tile id. 
   * Note that coordinate tiles are unnamed (the storage manager gives them
   * the default name SM_COORDINATE_TILE_NAME).
   */
  template<class T>
  const Tile* get_tile(const std::string& array_name, 
                       uint64_t tile_id);

  // TILE ITERATORS
  /** This class implements a constant tile iterator. */
  class const_iterator {
   public:
    /** Iterator constuctor. */
    const_iterator();
    /** Iterator constuctor. */
    const_iterator(
        StorageManager* storage_manager,
        const std::string& array_name, 
        const std::string& attribute_name, 
        const StorageManager::TileIDToRank::const_iterator& tile_id_it,
        const std::type_info* cell_type); 
    /** Assignment operator. */
    void operator=(const const_iterator& rhs);
    /** Pre-increment operator. */
    const_iterator operator++();
    /** Post-increment operator. */
    const_iterator operator++(int junk);
    /** 
     * Returns true if the iterator is equal to that in the
     * right hand side (rhs) of the operator. 
     */
    bool operator==(const const_iterator& rhs) const;
    /** 
     * Returns true if the iterator is equal to that in the
     * right hand side (rhs) of the operator. 
     */
    bool operator!=(const const_iterator& rhs) const;
    /** Returns the tile pointed by the iterator. */
    const Tile& operator*() const; 

   private:
    /** The array name corresponding to this iterator. */
    std::string array_name_;
    /** The attribute name corresponding to this iterator. */
    std::string attribute_name_;
    /** The storage manager object that created the iterator. */ 
    StorageManager* storage_manager_;
    /** Points to a tile id in StorageManager::tile_id_index_*/
    TileIDToRank::const_iterator tile_id_it_;
    /**
     * Holds the cell type of the tiles the iterator will iterate over 
     * (e.g., int) 
     */
    const std::type_info* cell_type_;
  };
  /**
   * Returns a tile iterator pointing to the first coordinate tile of 
   * the array. 
   */
  const_iterator begin(const std::string& array_name,
                       const std::type_info& cell_type);
  /**
   * Returns a tile iterator pointing to the first attribute tile of 
   * the array. 
   */
  const_iterator begin(const std::string& array_name, 
                       const std::string& attribute_name,
                       const std::type_info& cell_type);
  /**
   * Returns a tile iterator pointing one position after the last 
   * coordinate tile of the array. 
   */
  const_iterator end(const std::string& array_name,
                     const std::type_info& cell_type);
  /**
   * Returns a tile iterator pointing one position after the last 
   * attribute tile of the array. 
   */
  const_iterator end(const std::string& array_name, 
                     const std::string& attribute_name,
                     const std::type_info& cell_type);
  /** 
   * Returns the begin iterator to the StorageManager::MBRList that 
   * contains the MBRs of the intput array. 
   */ 
  MBRList::const_iterator MBR_begin(const std::string& array_name) const; 
  /** 
   * Returns the end iterator to the StorageManager::MBRList that 
   * contains the MBRs of the intput array. 
   */ 
  MBRList::const_iterator MBR_end(const std::string& array_name) const; 

  // MISC
  /** 
   * Returns the ids of the tiles whose MBR overlaps with the input range.
   * The bool variable in overlapping_tile_ids indicates whether the overlap
   * is full (i.e., if the tile MBR is completely in the range) or not.
   */
  void get_overlapping_tile_ids(
      const std::string& array_name, const Range& range, 
      std::vector<std::pair<uint64_t, bool> >* overlapping_tile_ids) const;

 private: 
  // PRIVATE ATTRIBUTES
    /** 
   * Determines the minimum amount of data that can be exchanged between the 
   * hard disk and the main memory. 
   */
  uint64_t segment_size_;
  /** 
   * Is a folder in the disk where the storage manager creates 
   * all the array data (i.e., tile and index files). 
   */
  std::string workspace_;
  /**
   * Stores the attribute names seen by the storage manager via 
   * StorageManager::append_tile (coordinate tiles have default name 
   * SM_COORDINATE_TILE_NAME). 
   */
  AttributeNameIndex attribute_name_index_;
  /** Stores the bounding coordinates of each coordinate tile. */
  BoundingCoordinatesIndex bounding_coordinates_index_;
  /** Stores the MBR of each stored coordinate tile. */
  MBRIndex MBR_index_;
  /**
   * Stores for every tile its offset in the file that accommodates (or will 
   * accommodate) it. 
   */ 
  OffsetIndex offset_index_;
  /** Stores the names of the open arrays, as well as their modes. */
  OpenArraysIndex open_arrays_index_;
  /** 
   * Stores the sum of payloads of the tiles currently in main memory for a pair 
   * (array_name, attribute_name) currently in main memory.
   */
  PayloadSizeIndex payload_size_index_;
  /** Stores the tile ids for each attribute of every array. */
  TileIDIndex tile_id_index_;
  /**
   * Stores a set of tiles for each attribute of every array. The maximum sum 
   * of the payloads of the tiles for a specific (array_name, attribute_name) 
   * pair stored in main memory is (approximately) equal to 
   * StorageManager::segment_size_ (in fact, it may exceed it by a little bit - 
   * see StorageManager::append_tile for details). 
   */
  TileIndex tile_index_;
  
  // PRIVATE METHODS
  /**
   * Returns true if the array is correct. An array is 'correct' if (i) it is
   * empty (see StorageManager::array_is_empty), or (ii) if its tile entries in
   * the indices are correct (see StorageManager::tile_entries_are_correct).
   */
  bool array_is_correct(const std::string& array_name) const;
  /** 
   * Returns true if the array is empty. An array is empty if no tiles have been
   * inserted to it via StorageManager::append_tile. This also means that 
   * there is no entry for array_name in StorageManager::attribute_name_index_.
   */
  bool array_is_empty(const std::string& array_name) const;
  /** Contains proper assertions for the attribute entries in the indices. */
  void assert_attribute_entries(const std::string& array_name) const;
  /** Checks if array is open in the proper mode. */
  bool check_array_on_append_tile(const std::string& array_name) const;
  /** Checks if array is open. */
  bool check_array_on_close(const std::string& array_name) const;
  /** Checks if array is open in the proper mode. */
  bool check_array_on_get_tile(const std::string& array_name) const;
  /** Checks if array is open. */
  bool check_array_on_open(const std::string& array_name, 
                           ArrayMode mode) const;
  /** 
   * Checks if the number of dimensions of the input tile (inferred from 
   * the MBR size) is consistent with that of the stored ones.
   */
  bool check_dim_num_on_append_tile(const std::string& array_name, 
                                    const MBR& mbr) const;
  /** Checks if the increasing tile id order is respected. */
  bool check_tile_id_on_append_tile(
      const std::string& array_name, const std::string& attribute_name, 
      uint64_t tile_id) const;
  /** Checks if tile id exists. */
  bool check_tile_id_on_get_tile(
      const std::string& array_name, const std::string& attribute_name, 
      uint64_t tile_id) const;
  /** Creates array folder in the workspace. */
  void create_array_directory(const std::string& array_name);
  /** Creates the workspace folder. */
  void create_workspace();
  /** 
   * Deletes the directory of the array, along with all its files
   * (i.e., tile and index files).
   */
  void delete_directory(const std::string& array_name);
  /** Deletes the array indices from main memory. */
  void delete_indices(const std::string& array_name);
  /** Deletes the main-memory tiles of the array. */
  void delete_tiles(const std::string& array_name);
  /** Deletes the main-memory tiles of pair (array_name, attribute_name). */
  void delete_tiles(const std::string& array_name, 
                    const std::string& attribute_name);
  /** 
   * Writes the attribute names stored in StorageManager::attribute_name_index_ 
   * for array_name on the disk. NOTE: It assumes that the array is 'correct'
   * (see StorageManager::array_is_correct).
   */
  void flush_attribute_name_index(const std::string& array_name);
  /** 
   * Writes the bounding coordinates stored in 
   * StorageManager::bounding_coordinates_index_ 
   * for array_name on the disk. NOTE: It assumes that the array is 'correct'
   * (see StorageManager::array_is_correct).
   */
  void flush_bounding_coordinates_index(const std::string& array_name);
  /** Writes the array indices on the disk. */
  void flush_indices(const std::string& array_name);
  /** 
   * Writes the MBRs stored in StorageManager::MBR_index_ 
   * for array_name on the disk. NOTE: It assumes that the array is 'correct'
   * (see StorageManager::array_is_correct).
   */
  void flush_MBR_index(const std::string& array_name);
  /** 
   * Writes the tile offsets stored in StorageManager::offset_index_ for every
   * attribute of array_name on the disk. NOTE: It assumes that the array 
   * is 'correct' (see StorageManager::array_is_correct).
   */
  void flush_offset_index(const std::string& array_name);
  /** 
   * Writes the tile ids stored in StorageManager::tile_id_index_ 
   * for array_name (which are the same for all attributes) on the disk. 
   * NOTE: It assumes that the array is 'correct'
   * (see StorageManager::array_is_correct).
   */
  void flush_tile_id_index(const std::string& array_name);
  /** Writes the main-memory tiles of the array on the disk. */
  void flush_tiles(const std::string& array_name);
  /** 
   * Writes the main-memory tiles of (array_name, attribute_name) 
   * on the disk. 
   */
  void flush_tiles(const std::string& array_name, 
                   const std::string& attribute_name);
  /** Returns the tile from attribute_name of array_name with tile_id if it
   *  exists in StorageManager::tile_index_. Otherwise, it returns NULL. 
   */
  const Tile* get_tile_from_tile_index(
      const std::string& array_name, const std::string& attribute_name,
      uint64_t tile_id) const;
  /** 
   * Loads the attribute names of array_name from the disk and into 
   * StorageManager::attribute_name_index_.
   */
  void load_attribute_name_index(const std::string& array_name);
  /** 
   * Loads the bounding coordinates of array_name from the disk and into 
   * StorageManager::bounding_coordinates_index_. NOTE: It assumes that
   * StorageManager::attribute_name_index_ and
   * StorageManager::tile_id_index_ have been already loaded.
   */
  void load_bounding_coordinates_index(const std::string& array_name);
  /** Loads the array indices into main memory from the disk. */
  void load_indices(const std::string& array_name);
  /** 
   * Loads the MBRs of array_name from the disk and into 
   * StorageManager::MBR_index_. NOTE: It assumes that
   * StorageManager::attribute_name_index_ and
   * StorageManager::tile_id_index_ have been already loaded.
   */
  void load_MBR_index(const std::string& array_name);
  /** 
   * Loads the tile offsets of every attribute  of array_name from the disk  
   * and into StorageManager::offset_index_. NOTE: It assumes that
   * StorageManager::attribute_name_index_ and
   * StorageManager::tile_id_index_ have been already loaded.
   */
  void load_offset_index(const std::string& array_name);
  /** 
   * Fetches tiles from the disk into main memory. Specifically, it loads their
   * payloads into a buffer. The aggregate payload size of the tiles is equal
   * to the smallest number that exceeds StorageManager::segment_size_.
   * NOTE: Care must be taken after the call of this function to delete
   * the created buffer.
   * \param array_name The name of the input array.
   * \param attribute_name The name of the input attribute.
   * \param start_tile_id The id of the tile the loading will start from.
   * \param buffer The buffer that will store the payloads of the loaded tiles.
   * \return A pair (buffer_size, tile_num), where buffer_size is the size
   * of the created buffer, and tile_num is the number of loaded tiles.
   */
  std::pair<uint64_t, uint64_t> load_payloads_into_buffer(
      const std::string& array_name, const std::string& attribute_name,
      uint64_t start_tile_id, char*& buffer) const;
  /** 
   * Loads the tile ids of array_name from the disk and into 
   * StorageManager::tile_id_index_. NOTE: It assumes that
   * StorageManager::attribute_name_index_ has been already loaded.
   */
  void load_tile_id_index(const std::string& array_name);
  /** 
   * Loads attribute tiles from the disk for (array_name, attribute_name).
   * The loading starts from start_tile_id (recall that the tiles
   * are stored on disk in increasing tile order). The number of tiles
   * to be loaded is determined by StorageManager::segment_size_ (namely,
   * the function loads the minimum number of tiles whose aggregate
   * payload exceeds StorageManager::segment_size_).
   */
  template<class T> 
  void load_tiles(
      const std::string& array_name, const std::string& attribute_name, 
      uint64_t start_tile_id);
  /** 
   * Loads attribute tiles from the disk for (array_name, attribute_name).
   * The loading starts from start_tile_id (recall that the tiles
   * are stored on disk in increasing tile order). The number of tiles
   * to be loaded is determined by StorageManager::segment_size_ (namely,
   * the function loads the minimum number of tiles whose aggregate
   * payload exceeds StorageManager::segment_size_).
   */
  template<class T> 
  void load_tiles(const std::string& array_name, uint64_t start_tile_id);
  /** 
    * Creates tile_num attribute tiles for (array_name, attribute_name) 
    * from the payloads stored in buffer.
    */
  template<class T> 
  void load_tiles_from_buffer(
      const std::string& array_name, const std::string& attribute_name,
      uint64_t start_tile_id, char* buffer, uint64_t buffer_size,
      uint64_t tile_num);
  /** 
    * Creates tile_num coordinate tiles for array_name from the payloads 
    * stored in buffer.
    */
  template<class T> 
  void load_tiles_from_buffer(
      const std::string& array_name, uint64_t start_tile_id,
      char* buffer, uint64_t buffer_size, uint64_t tile_num);
  /** Returns true if the input path is an existing directory. */
  bool path_exists(const std::string& path);
  /** 
    * Copies the payloads of the tiles of (array_name, attribute_name)
    * currently in StorageManager::tile_index_ into the segment buffer).
    * The file_offset is the offset in the file where the segment buffer
    * will eventually be written to (needed for properly updating 
    * StorageManager::offset_index_).
    */
  void prepare_segment(
      const std::string& array_name, const std::string& attribute_name, 
      uint64_t file_offset, uint64_t segment_size, char *segment);
  /** Simply sets the workspace. */
  void set_workspace(const std::string& path);
  /**
   * Returns true if the tile entries in the indices are correct. The tile
   * entries are correct if StorageManager::tile_id_index_ stores the same 
   * tile id lists for all the attribute_name values of array_name. This is
   * to ensure that, for every encounterd tile_id, there is a tile in every
   * attribute of the array.
   */
  bool tile_entries_are_correct(const std::string& array_name) const;
  /** Properly updates StorageManager::attribute_name_index_. */
  void update_attribute_name_index_on_append_tile(
      const std::string& array_name, const std::string& attribute_name);
  /** Properly updates StorageManager::bounding_coordinates_index_. */
  void update_bounding_coordinates_index_on_append_tile(
      const std::string& array_name, 
      const BoundingCoordinates& bounding_coordinates);
  /** Properly updates StorageManager::MBR_index_. */
  void update_MBR_index_on_append_tile(
      const std::string& array_name, const MBR& mbr);
  /** 
    * Properly updates StorageManager::tile_index_. It also checks whether the
    * current sum of payloads for this (array_name, attribute_name) pair
    * exceeds the segment size (in which case it returns true, otherwise 
    * false).
    */
  bool update_payload_size_index_on_append_tile(
      const std::string& array_name, const std::string& attribute_name,
      uint64_t tile_size);
  /** Properly updates StorageManager::tile_id_index_. */
  void update_tile_id_index_on_append_tile(
      const std::string& array_name, const std::string& attribute_name,
      uint64_t tile_id);
  /** Properly updates StorageManager::tile_index_. */
  void update_tile_index_on_append_tile(
      const std::string& array_name, const std::string& attribute_name,
      const Tile* tile);
}; 

#endif
